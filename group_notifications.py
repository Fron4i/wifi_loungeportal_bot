"""group_notifications.py
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞: —Ä–∞–±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö + HTTP-—Ç–æ—á–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
---------------------------------------------------------------------
‚Ä¢ –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª–∏—á–∫–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.
‚Ä¢ –í –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω –≤—ã–∑—ã–≤–∞–µ—Ç /auth <CODE> ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∫ —Ç–æ—á–∫–µ Wi-Fi, /unauth ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥.
‚Ä¢ PHP-—Å–∫—Ä–∏–ø—Ç captive-–ø–æ—Ä—Ç–∞–ª–∞ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–µ—Ä–≥–∞–µ—Ç HTTP POST /wifi_auth —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
‚Ä¢ –ë–æ—Ç –∏—â–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ –∫–æ–¥—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω message_id).
"""

from __future__ import annotations

import asyncio
import logging
import os
import sqlite3
from datetime import datetime
from typing import Any, Dict, Optional

from aiohttp import web
from aiogram import Router, F, Bot
from aiogram.enums import ChatMemberStatus
from aiogram.types import Message
from dotenv import load_dotenv
import re
import secrets, string

from backend_client import (
    register_token_on_backend,
    check_token_on_backend,
    token_by_chat_on_backend,
    list_tokens_on_backend,
    token_by_nas_on_backend,
)

__all__ = [
    "router",
    "init",
    "start_http_server",
]

logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ .env
# ---------------------------------------------------------------------------
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
HTTP_HOST = os.getenv("GROUP_HTTP_HOST", "0.0.0.0")
HTTP_PORT = int(os.getenv("GROUP_HTTP_PORT", "8080"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–∏–≤—è–∑–æ–∫
#  - sqlite (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
#  - mysql  (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —á—Ç–æ –∏ PHP-backend: DB_HOST, DB_NAME, DB_USER, DB_PASS)
STORAGE = os.getenv("GROUP_MAP_STORAGE", "remote").lower()
DB_PATH = os.getenv("GROUP_MAP_DB", "group_auth.db")  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ STORAGE == 'sqlite'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MySQL –±–µ—Ä—ë–º –∏–∑ .env (—Å–æ–≤–ø–∞–¥–∞—é—Ç —Å submit.php)
MYSQL_HOST = os.getenv("DB_HOST")
MYSQL_DB   = os.getenv("DB_NAME")
MYSQL_USER = os.getenv("DB_USER")
MYSQL_PASS = os.getenv("DB_PASS")

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SQL
_PH = "%s" if STORAGE == "mysql" else "?"

# ---------------------------------------------------------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–æ—Ç (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ—É–Ω–∫—Ü–∏–µ–π init)
# ---------------------------------------------------------------------------
_bot: Optional[Bot] = None

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è master-–≥—Ä—É–ø–ø—ã ---
MASTER_GROUP_ID = int(os.getenv("MASTER_GROUP_ID", "0"))  # 0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ

# --- –£—Ç–∏–ª–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ ---
def _generate_token(length: int = 32) -> str:
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def _insert_token(token: str):
    try:
        _exec_sql(f"INSERT INTO group_auth(code) VALUES ({_PH})", (token,))
    except sqlite3.IntegrityError:
        # —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–µ–±–æ–≤–∞–ª chat_id NOT NULL -> –≤—Å—Ç–∞–≤–∏–º 0
        _exec_sql(f"INSERT INTO group_auth(code, chat_id) VALUES ({_PH}, 0)", (token,))


def init(bot: Bot) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç Bot –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    global _bot
    _bot = bot


# ---------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç STORAGE
# ---------------------------------------------------------------------------
if STORAGE == "mysql":
    try:
        import pymysql

        _conn = pymysql.connect(
            host=MYSQL_HOST,
            user=MYSQL_USER,
            password=MYSQL_PASS,
            database=MYSQL_DB,
            charset="utf8mb4",
            autocommit=True,
        )
        with _conn.cursor() as cur:
            cur.execute(
                """
                CREATE TABLE IF NOT EXISTS group_auth (
                    code VARCHAR(128) PRIMARY KEY,
                    chat_id BIGINT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
                """
            )
        logger.info("–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–≤—è–∑–æ–∫: MySQL (%s/%s)", MYSQL_HOST, MYSQL_DB)
    except Exception as exc:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite. –û—à–∏–±–∫–∞: %s", exc)
        STORAGE = "sqlite"

if STORAGE == "sqlite":
    _conn = sqlite3.connect(DB_PATH)
    _conn.execute(
        """
        CREATE TABLE IF NOT EXISTS group_auth (
            code TEXT PRIMARY KEY,
            chat_id INTEGER NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
    )
    _conn.commit()
    logger.info("–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–≤—è–∑–æ–∫: SQLite (%s)", DB_PATH)


def _exec_sql(query: str, params: tuple = (), fetch: bool = False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è SQLite –∏ PyMySQL."""
    cur = _conn.cursor()
    try:
        cur.execute(query, params)
        if fetch:
            rows = cur.fetchall()
            return rows
    finally:
        cur.close()

    if STORAGE == "sqlite":
        _conn.commit()  # –í sqlite –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞ –Ω–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def _set_mapping(code: str, chat_id: int) -> None:
    _exec_sql(
        f"REPLACE INTO group_auth (code, chat_id, created_at) VALUES ({_PH},{_PH},{_PH})",
        (code, chat_id, datetime.utcnow()),
    )
    logger.info("–ü—Ä–∏–≤—è–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s ‚Üí %s", code, chat_id)


def _get_chat_id(code: str) -> Optional[int]:
    rows = _exec_sql(f"SELECT chat_id FROM group_auth WHERE code={_PH}", (code,), fetch=True)
    return int(rows[0][0]) if rows else None


def _remove_mapping(code: str) -> None:
    _exec_sql(f"DELETE FROM group_auth WHERE code={_PH}", (code,))
    logger.info("–ü—Ä–∏–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞: %s", code)

# ---------------------------------------------------------------------------
# Telegram router (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Dispatcher)
# ---------------------------------------------------------------------------
router = Router()


@router.message(F.text.regexp(r"^/auth"))
async def cmd_auth(message: Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ /auth <CODE> —á–µ—Ä–µ–∑ PHP-–±—ç–∫–µ–Ω–¥ (–ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –±–æ–ª—å—à–µ –Ω–µ—Ç)."""
    if message.chat.type not in {"group", "supergroup"}:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

    m = re.match(r"^/auth(?:@\w+)?\s+(\S+)$", message.text or "")
    if not m:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /auth <CODE> (–ø—Ä–∏–º–µ—Ä: /auth 112233)")

    code = m.group(1)

    assert _bot is not None
    bot_member = await _bot.get_chat_member(message.chat.id, _bot.id)
    if bot_member.status not in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        return await message.reply("–Ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

    user_member = await _bot.get_chat_member(message.chat.id, message.from_user.id)
    if user_member.status not in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        return await message.reply("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    data = await check_token_on_backend(code)
    if not data or not data.get("ok"):
        return await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω.")

    busy = data.get("busy", False)
    current_chat = int(data.get("chat_id") or 0)

    if (not busy) or current_chat == 0:
        ok = await register_token_on_backend(code, chat_id=message.chat.id)
        if ok:
            await message.reply(f"‚úîÔ∏è –¢–æ–∫–µ–Ω <b>{code}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        else:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif current_chat == message.chat.id:
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ.")
    else:
        await message.reply("üö´ –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–æ–π.")


@router.message(F.text == "/status")
async def cmd_status(message: Message):
    data = await token_by_chat_on_backend(message.chat.id)
    if data and data.get("ok") and data.get("token"):
        token_val = data["token"]
        await message.reply(f"–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –∫–æ–¥–æ–º <code>{token_val}</code>.", parse_mode="HTML")
    else:
        await message.reply("–ì—Ä—É–ø–ø–∞ –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth <CODE>.")


@router.message(F.text == "/unauth")
async def cmd_unauth(message: Message):
    assert _bot is not None
    user_member = await _bot.get_chat_member(message.chat.id, message.from_user.id)
    if user_member.status not in {ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
        return await message.reply("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É.")

    data = await token_by_chat_on_backend(message.chat.id)
    token = data.get("token") if data and data.get("ok") else None
    if not token:
        return await message.reply("–ü—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    ok = await register_token_on_backend(token, chat_id=0)
    if ok:
        await message.reply("‚úÖ –¢–æ–∫–µ–Ω –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ---------------------------------------------------------------------------
# HTTP handler –æ—Ç captive-–ø–æ—Ä—Ç–∞–ª–∞
# ---------------------------------------------------------------------------
async def _send_notification(data: Dict[str, Any]):
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ code."""
    code = data.get("code")
    if not code:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–ª—è 'code': %s", data)
        return

    chat_id = data.get("chat_id")
    if not chat_id and code:
        info = await check_token_on_backend(code)
        chat_id = int(info.get("chat_id")) if info else None

    if not chat_id or int(chat_id) == 0:
        logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π code=%s; —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.", code)
        return

    user_name = data.get("user_name") or "–Ω–µ—Ç username"

    text = (
        "<i><b>–ù–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Wi-Fi</b></i>\n"
        f"<b>User_name:</b> {user_name}\n"
        f"<b>TG-ID:</b> {data.get('telegram_id','?')}\n"
        f"<b>TEL:</b> +{data.get('phone_number','?')}\n"
        f"<b>IP:</b> {data.get('ip','?')}\n"
        f"<b>MAC:</b> <code>{data.get('mac','?')}</code>"
    )

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    assert _bot is not None
    try:
        contact_chat = data.get("contact_chat_id")
        contact_msg = data.get("contact_message_id")
        if contact_chat and contact_msg:
            await _bot.forward_message(chat_id, int(contact_chat), int(contact_msg))
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ).")

    await _bot.send_message(chat_id, text, disable_web_page_preview=True)


_routes = web.RouteTableDef()


@_routes.post("/wifi_auth")
async def wifi_auth(request: web.Request):
    """Endpoint, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ submit.php."""
    try:
        if request.content_type == "application/json":
            payload = await request.json()
        else:
            post_data = await request.post()
            payload = dict(post_data)
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s", payload)
        asyncio.create_task(_send_notification(payload))
        return web.Response(text="OK")
    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", exc)
        return web.Response(text="ERROR", status=500)

# ---------------------------------------------------------------------------
# HTTP-server launcher (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py)
# ---------------------------------------------------------------------------
async def start_http_server(host: str = HTTP_HOST, port: int = HTTP_PORT):
    app = web.Application()
    app.add_routes(_routes)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host, port)
    await site.start()
    logger.info("HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s:%s", host, port)

@router.message(F.text.regexp(r"^/gentoken"))
async def cmd_generate_token(message: Message):
    """/gentoken <nas_ip> [len]. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ master-–≥—Ä—É–ø–ø–µ."""
    if MASTER_GROUP_ID == 0 or message.chat.id != MASTER_GROUP_ID:
        return

    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /gentoken <nas_ip> [–¥–ª–∏–Ω–∞]")

    nas_ip = parts[1]
    length = 32
    if len(parts) > 2 and parts[2].isdigit():
        length = max(8, min(int(parts[2]), 128))

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ nas_ip
    existing = await token_by_nas_on_backend(nas_ip)
    if existing and existing.get("token"):
        token = existing["token"]
        await message.reply(
            f"<b>–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è {nas_ip}:</b> <code>{token}</code>\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω—É –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã, –æ–Ω –ø—Ä–∏–≤—è–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /auth TOKEN",
            parse_mode="HTML")
        return

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    token = _generate_token(length)

    from backend_client import register_token_on_backend
    ok = await register_token_on_backend(token, chat_id=0, nas_ip=nas_ip)
    if ok:
        await message.reply(
            f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω:</b> <code>{token}</code>\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω—É –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã, –æ–Ω –ø—Ä–∏–≤—è–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /auth TOKEN",
            parse_mode="HTML")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", parse_mode="HTML")


@router.message(F.text == "/tokens")
async def cmd_list_tokens(message: Message):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ PHP-–±—ç–∫–µ–Ω–¥–∞."""
    if MASTER_GROUP_ID == 0 or message.chat.id != MASTER_GROUP_ID:
        return

    tokens = await list_tokens_on_backend()
    if not tokens:
        return await message.reply("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç.")

    lines = []
    for item in tokens:
        code = item.get("token") or "?"
        chat = item.get("chat_id") or 0
        nas  = item.get("nas_ip") or "?"
        status = "üîì —Å–≤–æ–±–æ–¥–µ–Ω" if int(chat) == 0 else f"üîí chat_id {chat}"
        lines.append(f"<code>{code}</code> ({nas}) ‚Äî {status}")

    await message.reply("\n".join(lines), parse_mode="HTML")