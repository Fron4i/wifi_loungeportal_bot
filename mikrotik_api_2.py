import time
import datetime
import requests
import logging
from librouteros import connect
from librouteros.login import plain as login_plain

ROUTER_HOST = '91.221.246.23'
ROUTER_PORT = 44444
ROUTER_USER = 'iliya'
ROUTER_PASS = '4`P<OjT1'
BYPASS_LIFETIME = 24 * 3600  # 24 —á–∞—Å–∞


bypass_logger = logging.getLogger("bypass_cleanup")

def print_all_bypass(api):
    bypass_path = api.path('ip', 'hotspot', 'ip-binding')
    bypass_list = list(bypass_path(cmd='print'))
    bypass_logger.info("\nüìã –¢–µ–∫—É—â–∏–µ bypass-–∑–∞–ø–∏—Å–∏:")
    for bypass in bypass_list:
        comment = bypass.get('comment')
        bypass_logger.info(f" - mac-address: {bypass.get('mac-address')}, type: {bypass.get('type')}, comment: {comment}")

def add_bypass_by_telegram_id(telegram_id: int):
    url = "https://nas.lounge-place.ru/wifi/submit.php"
    payload = {
        "telegram_id": telegram_id
    }

    try:
        response = requests.post(url, data=payload)
        bypass_logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞ (status: {response.status_code}): {response.text}")

        if response.status_code != 200:
            bypass_logger.info(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {response.status_code}")
            return

        data = response.json()
        mac_address = data.get("mac_address")

        if not mac_address:
            bypass_logger.info("‚ùå MAC-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
            return

        add_bypass(mac_address)

    except Exception as e:
        bypass_logger.info(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")


def add_bypass(mac_address: str):
    api = connect(
        host=ROUTER_HOST,
        username=ROUTER_USER,
        password=ROUTER_PASS,
        port=ROUTER_PORT,
        login_method=login_plain,
    )
    print_all_bypass(api)

    bypass_path = api.path('ip', 'hotspot', 'ip-binding')

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ bypass –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ –∫–æ–¥–µ
    bypass_list = list(bypass_path(cmd='print'))
    existing = [b for b in bypass_list if b.get('mac-address') == mac_address]
    if existing:
        bypass_logger.info(f"‚ö†Ô∏è Bypass –¥–ª—è MAC {mac_address} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –±—É–¥–µ–º.")
        print_all_bypass(api)
        api.close()
        return

    now = datetime.datetime.now()
    comment = now.strftime("%d.%m.%Y:%H-%M-%S")

    bypass_path.add(
    **{
        'mac-address': mac_address,
        'type': 'bypassed',
        'comment': comment,
    	}
		)

    bypass_logger.info(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω bypass –¥–ª—è {mac_address} —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º (–≤—Ä–µ–º—è) {comment}")

    print_all_bypass(api)
    api.close()


def clean_old_bypass():
    api = connect(
        host=ROUTER_HOST,
        username=ROUTER_USER,
        password=ROUTER_PASS,
        port=ROUTER_PORT,
        login_method=login_plain,
    )
    print_all_bypass(api)
    
    bypass_path = api.path('ip', 'hotspot', 'ip-binding')
    now = time.time()
    deleted_count = 0

    bypasses = list(bypass_path(cmd='print'))
    for b in bypasses:
        if b.get('type') == 'bypassed':
            comment = b.get('comment')
            if comment:
                if not isinstance(comment, str):
                    comment = str(comment)
                try:
                    dt = datetime.datetime.strptime(comment, "%d.%m.%Y:%H-%M-%S")
                    created_time = dt.timestamp()
                    if now - created_time > BYPASS_LIFETIME:
                        bypass_logger.info(f"üóë –£–¥–∞–ª—è–µ–º bypass —Å MAC {b.get('mac-address')}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π {dt.strftime('%Y-%m-%d %H:%M:%S')}")
                        bypass_path.remove(b.get('.id'))  # <== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
                        deleted_count += 1
                except ValueError:
                    pass

    bypass_logger.info(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ bypass –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
    print_all_bypass(api)
    api.close()


if __name__ == "__main__":
    # MAC_TEST = '26:C7:BB:3D:11:76'

    # bypass_logger.info("=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ bypass ===")
    # add_bypass(MAC_TEST)

    # bypass_logger.info("\n=== –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö bypass ===")
    # clean_old_bypass()

    bypass_logger.info("\n=== –≠–¢–û –§–ê–ô–õ mikrotik_api_2.py ===")