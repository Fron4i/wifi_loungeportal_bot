# handlers/start.py
import os
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest
from concurrent.futures import ThreadPoolExecutor


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.contact_request import contact_keyboard
from keyboards.subscription import subscription_keyboard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
from backend_client import update_user_on_backend
# from mikrotik_api_2 import add_bypass_by_telegram_id


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
CHANNEL_ID_STR = os.getenv("CHANNEL_ID")
if not CHANNEL_ID_STR:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ.")

try:
    CHANNEL_ID = int(CHANNEL_ID_STR)
except ValueError:
    CHANNEL_ID = CHANNEL_ID_STR # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ @username

CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/arhipo_osipovka_eva")
CHANNEL_DISPLAY_NAME = os.getenv("CHANNEL_DISPLAY_NAME", "–ê—Ä—Ö–∏–ø–æ-–û—Å–∏–ø–æ–≤–∫–∞") # –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ "–ê—Ä—Ö–∏–ø–æ-–û—Å–∏–ø–æ–≤–∫–∞ –ï–≤–∞" –Ω–∞ "–ê—Ä—Ö–∏–ø–æ-–û—Å–∏–ø–æ–≤–∫–∞"

logger = logging.getLogger(__name__)
executor = ThreadPoolExecutor(max_workers=1)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class AuthState(StatesGroup):
    waiting_for_contact = State()
    waiting_for_subscription_check = State()
    authorized_pending_wifi = State()

router = Router()

# --- –£—Ç–∏–ª–∏—Ç–∞ send_or_edit_message (–ò–°–ü–†–ê–í–õ–ï–ù–ê) ---
async def send_or_edit_message(source: Message | CallbackQuery, text: str, reply_markup=None, parse_mode="HTML", show_alert_on_callback: str | None = None):
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery."""
    if isinstance(source, CallbackQuery):
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ CallbackQuery –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        try:
            if show_alert_on_callback is not None:
                await source.answer(show_alert_on_callback, show_alert=True)
            else:
                await source.answer() # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
        except TelegramBadRequest as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ CallbackQuery (id: {source.id}): {e}. "
                           f"–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ callback-–∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.")
        
        try:
            if source.message: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await source.message.edit_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=True
                )
            else:
                logger.warning(f"CallbackQuery (id: {source.id}) –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (source.message is None). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        except TelegramBadRequest as e:
            msg_id = source.message.message_id if source.message else "N/A"
            if "message is not modified" in str(e).lower():
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ (ID: {msg_id}) –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ —Ç–µ–∫—É—â–µ–º—É.")
            elif "message to edit not found" in str(e).lower() or "message can't be edited" in str(e).lower():
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ (ID: {msg_id}) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {e}")
            elif "query is too old" in str(e).lower():
                 logger.warning(f"CallbackQuery (id: {source.id}, message_id: {msg_id}) —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {msg_id}) –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {e}")
        except Exception as e:
            msg_id = source.message.message_id if source.message else "N/A"
            logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (ID: {msg_id}): {e}")

    elif isinstance(source, Message):
        await source.answer(text, reply_markup=reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user_name = message.from_user.first_name
    
    # –í–∞—à–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É Wi-Fi –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n\n"
        f"1Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        f"2Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–∫—Ü–∏–π: <a href=\"{CHANNEL_LINK}\">{CHANNEL_DISPLAY_NAME}</a>\n\n"
        f"‚ùóÔ∏è<b>–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É <u>üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç</u>, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</b>‚ùóÔ∏è\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=contact_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await state.set_state(AuthState.waiting_for_contact)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
@router.message(AuthState.waiting_for_contact, F.contact)
async def handle_contact(message: Message, state: FSMContext):
    contact = message.contact
    telegram_id = message.from_user.id
    phone_number = contact.phone_number

    raw_username = message.from_user.username  # str | None
    user_name = f"{raw_username}" if raw_username else None

    if message.from_user.id != contact.user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=contact_keyboard())
        return

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    
    await state.update_data(phone_number=phone_number, telegram_id=telegram_id,user_name=user_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_name}) {telegram_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç: {phone_number}")

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href=\"{CHANNEL_LINK}\">{CHANNEL_DISPLAY_NAME}</a> –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å'.",
        reply_markup=subscription_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await state.set_state(AuthState.waiting_for_subscription_check)

# --- –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ ---
async def check_subscription_and_update_backend(user_id: int, bot: Bot, state: FSMContext, source: Message | CallbackQuery):
    user_data = await state.get_data()
    phone_number = user_data.get('phone_number')
    user_name    = user_data.get('user_name')

    if not phone_number:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω phone_number –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è user_id {user_id} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start."
        alert_msg_for_cb = error_msg if isinstance(source, CallbackQuery) else None
        await send_or_edit_message(source, error_msg, show_alert_on_callback=alert_msg_for_cb)
        await state.clear()
        return

    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        is_user_subscribed = member.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
        
        if is_user_subscribed:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—Ç–µ–ª: {phone_number}) –ü–û–î–ü–ò–°–ê–ù –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}. {user_name}")
            
            success, backend_message = await update_user_on_backend(
                telegram_id=user_id,
                phone_number=phone_number,
                is_subscribed=True,
                user_name=user_name
            )

            # loop = asyncio.get_event_loop()
            # await loop.run_in_executor(executor, add_bypass_by_telegram_id, user_id)

            restart_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="/start")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )

            if success:
                await state.set_state(AuthState.authorized_pending_wifi)
                final_text = (
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã!\n\n"
                    "–î–æ—Å—Ç—É–ø –∫ Wi-Fi –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–∞—à–µ–π —Å–µ—Ç–∏.\n\n"
                    "–ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É."
                )
                alert_msg_for_cb = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã." if isinstance(source, CallbackQuery) else None
                await send_or_edit_message(source, final_text, reply_markup=None, show_alert_on_callback=alert_msg_for_cb)
                await bot.send_message(
                    chat_id=user_id,
                    text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:",
                    reply_markup=restart_kb
                )
            else:
                error_text_backend = (
                    f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, —Å–ø–∞—Å–∏–±–æ! ‚úÖ\n\n"
                    f"‚ö†Ô∏è –û–¥–Ω–∞–∫–æ, –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É Wi-Fi –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞: <i>{backend_message}</i>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏ (—ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞).\n"
                    f"–ó–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å' –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.\n"
                    f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                alert_msg_for_cb = f"–û—à–∏–±–∫–∞ Wi-Fi: {backend_message}" if isinstance(source, CallbackQuery) else None
                await send_or_edit_message(source, error_text_backend, reply_markup=subscription_keyboard(), show_alert_on_callback=alert_msg_for_cb)
                await bot.send_message(
                    chat_id=user_id,
                    text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:",
                    reply_markup=restart_kb
                )
        
        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ü–û–î–ü–ò–°–ê–ù
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—Ç–µ–ª: {phone_number}) –ù–ï –ü–û–î–ü–ò–°–ê–ù –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID} (—Å—Ç–∞—Ç—É—Å: {member.status}).")
            
            await update_user_on_backend(
                telegram_id=user_id,
                phone_number=phone_number,
                is_subscribed=False,
                user_name=user_name
            )
            
            not_subscribed_text = "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å' –µ—â–µ —Ä–∞–∑."
            alert_msg_for_cb = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å." if isinstance(source, CallbackQuery) else None
            await send_or_edit_message(source, not_subscribed_text, reply_markup=subscription_keyboard(), show_alert_on_callback=alert_msg_for_cb)

    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id {user_id} –Ω–∞ {CHANNEL_ID}: {e}")
        api_error_text = (
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n"
            "–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        alert_msg_for_cb = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏." if isinstance(source, CallbackQuery) else None
        await send_or_edit_message(source, api_error_text, reply_markup=subscription_keyboard(), show_alert_on_callback=alert_msg_for_cb)

    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è user_id {user_id}: {e}")
        unexpected_error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        alert_msg_for_cb = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if isinstance(source, CallbackQuery) else None
        await send_or_edit_message(source, unexpected_error_text, reply_markup=subscription_keyboard(), show_alert_on_callback=alert_msg_for_cb)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" ---
@router.callback_query(AuthState.waiting_for_subscription_check, F.data == "check_subscription")
async def callback_check_subscription(callback_query: CallbackQuery, bot: Bot, state: FSMContext):
    await check_subscription_and_update_backend(callback_query.from_user.id, bot, state, callback_query)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö (–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ) ---
@router.message(StateFilter(AuthState.waiting_for_contact, AuthState.waiting_for_subscription_check))
async def any_other_message_in_auth_flow(message: Message, state: FSMContext):
    current_state_str = await state.get_state()
    user_name = message.from_user.first_name

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.new_chat_members or message.left_chat_member or message.pinned_message or message.group_chat_created or message.supergroup_chat_created or message.channel_chat_created:
        return

    if current_state_str == AuthState.waiting_for_contact.state:
        await message.answer(
            f"{user_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' –Ω–∏–∂–µ üëá",
            reply_markup=contact_keyboard()
        )
    elif current_state_str == AuthState.waiting_for_subscription_check.state:
        await message.answer(
            f"{user_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª <a href=\"{CHANNEL_LINK}\">{CHANNEL_DISPLAY_NAME}</a> (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ) –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å' –ø–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=subscription_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Wi-Fi" ---
@router.message(AuthState.authorized_pending_wifi)
async def message_when_authorized(message: Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.new_chat_members or message.left_chat_member or message.pinned_message or message.group_chat_created or message.supergroup_chat_created or message.channel_chat_created:
        return

    await message.answer(
        "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –≤ –±–æ—Ç–µ! ‚úÖ\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É Wi-Fi. –î–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏.\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )